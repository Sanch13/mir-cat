services:
  fastapi_app:
    build:
      context: ./backend
      dockerfile: Dockerfile-local
    container_name: app
    volumes:
      - ./backend/src:/app/src
      - ./backend/migrations:/app/migrations
      - ./backend/alembic.ini:/app/alembic.ini
    working_dir: /app
    command: ["uv", "run", "uvicorn", "--factory", "src.main:create_app", "--reload",
      "--host", "0.0.0.0", "--port", "8000", ]
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - local

  postgres:
    image: postgres:17.3-alpine
    container_name: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - local
    restart: unless-stopped

  nginx:
    image: nginx:1.29-alpine
    container_name: nginx
    ports:
      - "8000:80"
    volumes:
      - ./backend/nginx/conf.d/:/etc/nginx/conf.d
    depends_on:
      - fastapi_app
    networks:
      - local
    restart: unless-stopped

  redis:
    image: redis:8.2-alpine
    container_name: redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - local
    restart: unless-stopped
#    command: redis-server --appendonly yes  # --appendonly yes если хотите сохранять данные Redis.

  taskiq_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile-local
    container_name: taskiq_worker
    working_dir: /app
    command: [
      "uv",
      "run",
      "taskiq",
      "worker",
      "src.config.broker:broker",
      "src.data_access.taskiq.tasks.schedule_tasks",
      "--fs-discover",
      "--workers",
      "3",
      "--log-level",
      "INFO"
    ]
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    networks:
      - local
    volumes:
      - ./backend/src:/app/src

  taskiq_scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile-local
    container_name: taskiq_scheduler
    working_dir: /app
    command: [
      "uv",
      "run",
      "taskiq",
      "scheduler",
      "src.config.broker:scheduler",
      "src.data_access.taskiq.tasks.schedule_tasks",
      "--log-level",
      "INFO"
    ]
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - local
    volumes:
      - ./backend/src:/app/src

networks:
  local:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
